function [] = GUI_WV()
%% Variablen initalisieren
% Grafik Einstellungen
bgc = [0.831 0.831 0.784]; %background-color
hlc = [1 1 1]; %highlight-color

% Materialobjekt
S.material = CMaterial;
% Geometrieobjekt
S.geometrie = CGeometrie;


%% Hauptfenster erstellen und zentrieren
S.fh = figure('resize','off',...
              'units','pixels',...
              'position',[100 100 950 550],...
              'menubar','none',...
              'numbertitle','off',...
              'name','MAIN',...
              'color',[0.941 0.941 0.941],...
              'HandleVisibility', 'callback');

pause(0.25) %Bug-Workaround
movegui(S.fh,'center')

%% Linke Menuleiste
%Erzeugen
%panel
S.ml.parent = uipanel('Title','',...
               'units','pixels',...
               'position',[0 0 250 550],...
               'BackgroundColor',bgc,...
               'BorderType','none',...
               'Parent',S.fh);

set(S.ml.parent,'position',[0 0 250 550]);

%upper buttons
S.ml.pb(1) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 520 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Material',...
                       'enable','on',...
                       'Callback',{@popMenu,1});
S.ml.pb(2) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 490 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Grundgeometrie',...
                       'enable','on',...
                       'Callback',{@popMenu,2});
S.ml.pb(3) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 460 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Wendelgeometrie',...
                       'enable','on',...
                       'Callback',{@popMenu,3});
%bottom buttons
S.ml.pb(4) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 60 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Berechnung starten',...
                       'enable','on',...
                       'Callback',{@calc});
S.ml.pb(5) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 30 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Ergebnis prüfen',...
                       'enable','on',...
                       'Callback',{@popMenu,5});
S.ml.pb(6) = uicontrol('Parent',S.fh,...
                       'style','pushbutton',...
                       'units','pixels',...
                       'position',[1 0 248 30],...
                       'BackgroundColor',bgc,...
                       'string','Export-Setup',...
                       'enable','on',...
                       'Callback',{@popMenu,6});
% Betriebspunkt panel
S.ml.pl(1).parent = uipanel('Title','Betriebspunkt',...
                             'parent',S.ml.parent,...
                             'units','pixels',...
                             'position',[1 380 245 70],...
                             'BackgroundColor',bgc);
[S.ml.pl(1).tx, S.ml.pl(1).ed, tx_tmp] = createList( 10, 10, {'Temperatur','','°C';'Massenstrom','','kg/h'},bgc, S.ml.pl(1).parent);
S.ml.pl(1).tx = [ S.ml.pl(1).tx; tx_tmp];
% Rechnungsparameter panel
S.ml.pl(2).parent = uipanel('Title','Rechnungsparameter',...
                             'parent',S.ml.parent,...
                             'units','pixels',...
                             'position',[1 320 245 50],...
                             'BackgroundColor',bgc);
[S.ml.pl(2).tx, S.ml.pl(2).ed, tx_tmp] = createList( 10, 10, {'Elementdichte','','-';},bgc, S.ml.pl(2).parent);
S.ml.pl(2).tx = [ S.ml.pl(2).tx; tx_tmp];
% Randbedingungen panel
S.ml.pl(3).parent = uipanel('Title','Randbedingungen',...
                             'parent',S.ml.parent,...
                             'units','pixels',...
                             'position',[1 180 245 130],...
                             'BackgroundColor',bgc);
[S.ml.pl(3).tx, S.ml.pl(3).ed, tx_tmp] = createList( 10, 90, {'Endspalt','','mm';},bgc, S.ml.pl(3).parent);
S.ml.pl(3).tx = [ S.ml.pl(3).tx; tx_tmp];
pos_tmp = get(S.ml.pl(3).ed(1), 'position');
set(S.ml.pl(3).ed(1),'position', [pos_tmp(1:2) 59 pos_tmp(4)]);
S.ml.pl(3).pb(1) = uicontrol('style','pushbutton',...
                             'parent', S.ml.pl(3).parent,...
                             'units','pixels',...
                             'position',[169 90 21 21],...
                             'string','>',...
                             'BackgroundColor', hlc,...
                             'Callback',{@popMenu,4});
% S.ml.pl(3).tx(3) = uicontrol('style','text',...
%                              'parent',S.ml.pl(3).parent,...
%                              'units','pixels',...
%                              'position',[10 40 150 34],...
%                              'HorizontalAlignment','left',...
%                              'string','Endspalt anpassen um Wendeltiefe zu erreichen',...
%                              'BackgroundColor',bgc,...
%                              'FontSize',10);
S.ml.pl(3).cb = uicontrol('style','checkbox',...
                             'parent', S.ml.pl(3).parent,...
                             'units','pixels',...
                             'position',[10 45 200 36],...
                             'string','<html><p style="margin-left:5px;">Endspalt anpassen um <br />Wendeltiefe zu erreichen</p></html>',...
                             'BackgroundColor', bgc,...
                             'FontSize',10);


createList( 10, 10, {'Wendeltiefe','','mm';},bgc, S.ml.pl(3).parent);
                 
%% Axes

%% Nested Functions
    function calc(varargin)
        % Liest alle Daten ein, startet die Berechnung
        
        % Betriebspunkt-Parameter einlesen
        S.material.T = str2doubleN(get(S.ml.pl(1).ed(1),'string'))+273.15;
        S.material.m = str2doubleN(get(S.ml.pl(1).ed(2),'string')) / S.geometrie.n * 60^-2;
        
        % Rechnungsparameter einlesen
        psln = str2doubleN(get(S.ml.pl(2).ed(1),'string'));
        
        % Randbedingungen einlesen
        st_end = str2doubleN(get(S.ml.pl(3).ed(1),'string'))*1e-3;
        
        % To-Do: Prüfung S.material
        % To-Do: Prüfung S.geometrie
        
        % Idealen Spalttiefenverlauf berechnen
        S.ST_id = getSTiefe(S.material, S.geometrie, psln, S.material.m, st_end)*1e3;
        %Spalttiefenverlauf glätten
        S.ST_sm = sm_ST(S.ST_id);
        % Geglätteten Verlauf in Objekt schreiben
        S.geometrie.STiefe = S.ST_sm;
        
        % Erste Näherung Wendeltiefenverlauf
        S.geometrie.KTiefe = linspace(S.geometrie.R*2.5*1e3,0.01,5);
        
        % Berechnungshinweis erstellen
        hint = uicontrol('style','text',...
                         'units','pixels',...
                         'position',[450 270 300 65],...
                         'HorizontalAlignment','center',...
                         'string',sprintf('\n Berechnung läuft\n Bitte warten...'),...
                         'BackgroundColor',[0.831 0.816 0.784],...
                         'FontSize',10);
        drawnow;
        
        % idealen Wendeltiefenverlauf berechnen
        [ S.Wendel, S.StegSteg, S.StegEnde ] = MainCalculation_KTiefe(S.geometrie,S.material,S.material.m,psln);
        S.WT = [S.Wendel.H]*1e3;
        S.WL = cumsum([S.Wendel.L])*1e3;
        
        % ToDo: Loop für WT-Grenzwert-Rechnung
        
        % Berechnungshinweis löschen
        delete(hint);
        
        % Ergebnis plotten
        
        %Wendeltiefenverlauf glätten
        [xData, yData] = prepareCurveData( S.WL, S.WT );
        % Set up fittype and options.
        ft = fittype( 'fourier2' );
        opts = fitoptions( 'fourier2' );
        % Fit model to data.
        [S.fitresult_wl, ~] = fit( xData, yData, ft, opts );
        S.WT_sm = feval(S.fitresult_wl,linspace(0,sum([S.Wendel(1:end).L])*1e3,30));
        
        
        % Anzeige Tiefenverlauf
        try %#ok<TRYNC>
%             delete(S.ax(1));
            delete(S.df.parent);
        end
        S.df.parent = uipanel('Title','',...
                               'units','pixels',...
                               'position',[250 0 700 550],...
                               'BackgroundColor',[0.941 0.941 0.941],...
                               'BorderType','none',...
                               'Parent',S.fh);
        S.df.ax(1) = axes('Parent',S.df.parent,...
                           'units','pixels',...
                           'OuterPosition',[0,0,700,550]);

        plot(S.fitresult_wl,S.WL,S.WT);
        title(S.df.ax(1),'Wendeltiefe');
        xlabel(S.df.ax(1),'Wendellänge [mm]');
        ylabel(S.df.ax(1),'Wendeltiefe [mm]');
        
        try %#ok<TRYNC>
%             delete(S.df.dcursor_bp);
            datacursormode off;
        end
        IconFile = fullfile(matlabroot, 'toolbox', 'matlab', 'icons', 'tool_data_cursor.gif');
        S.df.dcursor_bp = uicontrol('Style', 'ToggleButton', ...
           'Parent',S.df.parent,...
           'Position', [650, 500, 32, 32], ...
           'String', ['<html><img src="file:/', IconFile, '">'],...
           'CallBack','datacursormode(''toggle'')');
       assignin('base', 'WV_S', S);
    end %function calc

    function [ tx1, ed, tx2 ] = createList( posx, posy, Entries, bgc, varargin )
        % Erstellt Liste der Form: Textfeld Editfeld Textfeld und füllt sie
        % mit Werten
        
        % optionales parent argument
        if nargin>3
            parent = varargin{1};
        else
            parent = gco;
        end
        num_entries = size(Entries,1);
        tx1=zeros(num_entries,1); tx2=zeros(num_entries,1); ed=zeros(num_entries,1);
        for i=1:num_entries
            tx1(i) = uicontrol('style','text',...
                               'units','pixels',...
                               'position',[posx posy+(num_entries-i)*19 95 18],...
                               'HorizontalAlignment','left',...
                               'string',Entries(i,1),...
                               'BackgroundColor',bgc,...
                               'FontSize',10,...
                               'parent',parent);
            ed(i) = uicontrol('style','edit',...
                              'units','pixels',...
                              'position',[posx+100 posy+(num_entries-i)*19 80 21],...
                              'HorizontalAlignment','right',...
                              'string',Entries(i,2),...
                              'BackgroundColor',bgc,...
                              'FontSize',10,...
                              'parent',parent);
            tx2(i) = uicontrol('style','text',...
                               'units','pixels',...
                               'position',[posx+185 posy+(num_entries-i)*19 45 18],...
                               'HorizontalAlignment','left',...
                               'string',Entries(i,3),...
                               'BackgroundColor',bgc,...
                               'FontSize',10,...
                               'parent',parent);
        end
    end %function createList

    function [ tx1, sl, tx2 ] = createSlList( posx, posy, Entries, Slopt, bgc, varargin )
        % Erstellt Liste der Form: Textfeld Slider Textfeld und füllt sie
        % mit Werten
        
        % optionales parent argument
        if nargin>3
            parent = varargin{1};
        else
            parent = gco;
        end
        num_entries = size(Entries,1);
        tx1=zeros(num_entries,1); tx2=zeros(num_entries,1); sl=zeros(num_entries,1);
        for i=1:num_entries
            tx1(i) = uicontrol('style','text',...
                               'units','pixels',...
                               'position',[posx posy+(num_entries-i)*19 95 18],...
                               'HorizontalAlignment','left',...
                               'string',Entries(i,1),...
                               'BackgroundColor',bgc,...
                               'FontSize',10,...
                               'parent',parent);
            sl(i) = uicontrol('style','slider',...
                              'units','pixels',...
                              'position',[posx+100 posy+(num_entries-i)*19 80 18],...
                              'BackgroundColor',bgc,...
                              'Value',cell2mat(Entries(i,2)),...
                              'Min',Slopt(i,1),...
                              'Max',Slopt(i,2),...
                              'SliderStep',(diff(Slopt(i,1:2))./Slopt(i,3)).^-1*[1 1],...
                              'parent',parent);
            tx2(i) = uicontrol('style','text',...
                               'units','pixels',...
                               'position',[posx+185 posy+(num_entries-i)*19 45 18],...
                               'HorizontalAlignment','left',...
                               'string',Entries(i,3),...
                               'BackgroundColor',bgc,...
                               'FontSize',10,...
                               'parent',parent);
           set(sl(i),'Callback',{@updEd,tx2(i),Entries(i,3),Slopt(i,3)})
           updEd(sl(i),0,tx2(i),Entries(i,3),Slopt(i,3));
        end
        function updEd(h,~,t,sf,rd)
            val = round(get(h,'value')/rd)*rd;
            
            set(h,'Value',val);
            set(t,'string',strcat(num2str(get(h,'value')),sf) )
        end %function updEd
    end %function createSlList
    function popMenu(varargin)
        % Erstellt das Popupmenue fuer das linke menuband
        type = varargin{3};
        set(S.ml.pb(:), 'Enable', 'off');
        set(S.ml.pb(type), 'BackgroundColor', hlc);
        S.pm.parent = uipanel('Title','',...
                        'units','pixels',...
                        'position',[250 0 250 550],...
                        'BackgroundColor',hlc,...
                        'BorderType','none');

        S.pm.okpn.pn = uipanel('Title','',...
                        'units','pixels',...
                        'parent',S.pm.parent,...
                        'position',[-1 0 252 25],...
                        'BackgroundColor',[0.7 0.8 0.7],...
                        'BorderType','none');
        S.pm.okpn.pb(1) = uicontrol('style','pushbutton',...
                             'parent', S.pm.okpn.pn,...
                             'units','pixels',...
                             'position',[180 5 70 18],...
                             'string','OK',...
                             'BackgroundColor', hlc,...
                             'Callback', {@closePM,type});
        switch type
            case 1 %Material
                height = 250;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,1});
                
                [~, ed_tmp, ~] = createList( 10, 200, {'Dichte bei ST',S.material.vs^-1,'kg/m³';'Dichte bei BT',S.material.v0^-1,'kg/m³'},hlc, S.pm.parent);
                S.pm.ed = ed_tmp;
                [~, ed_tmp, ~] = createList( 10, 124, {'Carreau-A',S.material.A,'Pa s';'Carreau-B',S.material.B,'s';'Carreau-C',S.material.C,'-'},hlc, S.pm.parent);
                S.pm.ed = [S.pm.ed; ed_tmp];
                [~, ed_tmp, ~] = createList( 10, 67, {'Standardtemp...',S.material.Ts-273.15,'°C';'Bezugstemp...',S.material.T0-273.15,'°C'},hlc, S.pm.parent);
                S.pm.ed = [S.pm.ed; ed_tmp];
                S.pm.pb(1) = uicontrol('parent',S.pm.parent,...
                          'style','pushbutton',...
                          'units','pixels',...
                          'position',[10 32 115 20],...
                          'BackgroundColor', hlc,...
                          'string','Speichern',...
                          'enable','on',...
                          'Callback',{@saveMat});
                S.pm.pb(2) = uicontrol('parent',S.pm.parent,...
                          'style','pushbutton',...
                          'units','pixels',...
                          'position',[125 32 115 20],...
                          'BackgroundColor', hlc,...
                          'string','Laden',...
                          'enable','on',...
                          'Callback',{@loadMat});
                
            case 2 %Grundgeometrie
                height = 87;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,2});
                
                [~, ed_tmp, ~] = createList( 10, 37, {'Bauhöhe',S.geometrie.H*1e3,'mm';'Durchmesser',S.geometrie.D*1e3,'mm'},hlc, S.pm.parent);
                S.pm.ed = ed_tmp;
                
            case 3 %Wendelgeometrie
                height = 106;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,3});
                
                [~, ed_tmp, ~] = createList( 10, 37, {'Wendelzahl',S.geometrie.n,'-';'Steigungswinkel',S.geometrie.alpha,'°';'Kanalbreite',S.geometrie.R*2*1e3,'mm'},hlc, S.pm.parent);
                S.pm.ed = ed_tmp;
            case 4 % Endspalt bestimmen
                height = 550;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,4});
                set(S.ml.pb(type), 'BackgroundColor', bgc);
                set(S.ml.pl(3).pb(1), 'Enable', 'off');
%                 S.pm.bg = uibuttongroup('parent',S.pm.parent,...
%                                         'Title','',...
%                                         'units','pixels',...
%                                         'position',[0 25 250 height-25],...
%                                         'BackgroundColor',hlc,...
%                                         'BorderType','none');
                slct = [1 2];
                bgtxt = {'Endspalt','Anfangsspalt', 'Anfangswendeltiefe', 'Gesamtdruckverlust', 'Schergeschwindigkeit Wendel', 'Schergeschwindigkeit Spalt' };
                for i=1:length(bgtxt)
                S.pm.rb(i) = uicontrol('parent',S.pm.parent,...
                                      'style','radiobutton',...
                                      'units','pixels',...
                                      'position',[20 height-(30*i) 220 25],...
                                      'BackgroundColor', hlc,...
                                      'string',bgtxt{i},...
                                      'enable','on',...
                                      'value',0,...
                                      'ButtonDownFcn',{@showESsp,i},...
                                      'Callback',{@showESsp,i});
                end %for i
                set(S.pm.rb(slct),'value',1);
                
                %Displayframe
                set(S.df.parent,'visible','off'); %hide ResPlot
                S.pm.df.parent = uipanel('Title','',...
                                       'units','pixels',...
                                       'position',[500 0 450 550],...
                                       'BackgroundColor',[0.941 0.941 0.941],...
                                       'BorderType','none',...
                                       'Parent',S.fh);
                S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                           'units','pixels',...
                           'OuterPosition',[0,0,450,550],...
                           'NextPlot','replacechildren');
                % MenuBar
                mbar(S.pm.parent);
                showESS(slct);
                
            case 5 %Ergebnis prüfen
                height = 550;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,5});
                
                S.pm.bg = uibuttongroup('parent',S.pm.parent,...
                                        'Title','',...
                                        'units','pixels',...
                                        'position',[0 25 250 height-25],...
                                        'BackgroundColor',hlc,...
                                        'BorderType','none',...
                                        'SelectionChangeFcn',@showRes);
                bgtxt = {'Wendelvolumenstrom', 'Wandschubspannung', 'Schergeschwindigkeit', 'Druckabfall', 'Druck'};
                for i=1:length(bgtxt)
                S.pm.rb(i) = uicontrol('parent',S.pm.bg,...
                                      'style','radiobutton',...
                                      'units','pixels',...
                                      'position',[20 height-25-(30*i) 220 25],...
                                      'BackgroundColor', hlc,...
                                      'string',bgtxt{i},...
                                      'enable','on');
                end %for i
                % MenuBar
                mbar(S.pm.parent);
                
                NGeometrie = copy(S.geometrie);
                NGeometrie.KTiefe = S.WT_sm;
                psln = str2doubleN(get(S.ml.pl(2).ed(1),'string'));
                [V, NWendel, NStegSteg, NStegEnde ] = MainCalculation(NGeometrie,S.material,S.material.m,psln);
                
                tmp.NewValue = get(S.pm.bg,'SelectedObject'); %mimic event data structure
                showRes(S.pm.bg,tmp);
                
            case 6 %Exportieren
                height = 550;
                set(S.pm.parent,'position',[250 550-height 250 height]);
                set(S.pm.parent,'DeleteFcn',{@del,6});
                
                
                S.pm.cb(1) = uicontrol('style','checkbox',...
                               'units','pixels',...
                               'position',[10 512 230 18],...
                               'HorizontalAlignment','left',...
                               'string','Stufen an Optimierer übergeben',...
                               'Value',1,...
                               'BackgroundColor',hlc,...
                               'FontSize',10,...
                               'parent',S.pm.parent);
                [sl_l(:,1), sl_l(:,2), sl_l(:,3)] = createSlList( 10, 469, {'Stufen',10,'';'Bandbreite',10,'%'},[2, 50, 2; 1, 100, 1],hlc, S.pm.parent);
                set(S.pm.cb(1),'Callback',{@switchEnable,sl_l});
                
                S.pm.cb(2) = uicontrol('style','checkbox',...
                               'units','pixels',...
                               'position',[10 429 230 18],...
                               'HorizontalAlignment','left',...
                               'string','Verlauf verschieben',...
                               'Value',1,...
                               'BackgroundColor',hlc,...
                               'FontSize',10,...
                               'parent',S.pm.parent);
                [sl_2(:,1), sl_2(:,2), sl_2(:,3)] = createSlList( 10, 386, {'Stufen',10,'';'Bandbreite',10,'%'},[2, 50, 2; 1, 100, 1],hlc, S.pm.parent);
                set(S.pm.cb(2),'Callback',{@switchEnable,sl_2});
                
                S.pm.cb(3) = uicontrol('style','checkbox',...
                               'units','pixels',...
                               'position',[10 346 230 18],...
                               'HorizontalAlignment','left',...
                               'string','Anfangswert variieren',...
                               'Value',1,...
                               'BackgroundColor',hlc,...
                               'FontSize',10,...
                               'parent',S.pm.parent);
                [sl_l3(:,1), sl_l3(:,2), sl_l3(:,3)] = createSlList( 10, 303, {'Stufen',10,'';'Bandbreite',10,'%'},[2, 50, 2; 1, 100, 1],hlc, S.pm.parent);
                set(S.pm.cb(3),'Callback',{@switchEnable,sl_l3});
                
                
                S.pm.pb(1) = uicontrol('parent',S.pm.parent,...
                          'style','pushbutton',...
                          'units','pixels',...
                          'position',[10 263 230 30],...
                          'BackgroundColor', hlc,...
                          'string','WB-Journal Exportieren',...
                          'enable','on',...
                          'Callback',{@saveVerlauf});
                S.pm.pb(2) = uicontrol('parent',S.pm.parent,...
                          'style','pushbutton',...
                          'units','pixels',...
                          'position',[10 223 230 30],...
                          'BackgroundColor', hlc,...
                          'string','Daten in WB importieren',...
                          'enable','on',...
                          'Callback',{@import2WB});
                %Displayframe
                set(S.df.parent,'visible','off'); %hide ResPlot
                S.pm.df.parent = uipanel('Title','',...
                                       'units','pixels',...
                                       'position',[500 0 450 550],...
                                       'BackgroundColor',[0.941 0.941 0.941],...
                                       'BorderType','none',...
                                       'Parent',S.fh);
                
                %Wendel-Stützstellen
                xi_W = [linspace(0,max(S.WL),8)',feval(S.fitresult_wl,linspace(0,max(S.WL),8))];
                %Spalt-Stützstellen
                xi_S = [linspace(0,S.geometrie.H*1e3,8)',interpft(S.ST_sm,8)'];
                
                %Plot Wendeltiefe
                S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                           'units','pixels',...
                           'OuterPosition',[0,550/2,450,550/2],...
                           'NextPlot','add');
                plot(S.WL,feval(S.fitresult_wl,S.WL));
                stem(xi_W(:,1),xi_W(:,2),'o--','color',[0.7 0.7 0.7]);
                title(S.pm.df.ax(1),'Wendeltiefe');
                xlabel(S.pm.df.ax(1),'Wendellänge [mm]');
                ylabel(S.pm.df.ax(1),'Wendeltiefe [mm]');
                
                %plot Kanaltiefe
                S.pm.df.ax(2) = axes('Parent',S.pm.df.parent,...
                           'units','pixels',...
                           'OuterPosition',[0,0,450,550/2],...
                           'NextPlot','add');
                plot(linspace(0,S.geometrie.H*1e3,30),S.ST_sm);
                stem(xi_S(:,1),xi_S(:,2),'o--','color',[0.7 0.7 0.7]);
                title(S.pm.df.ax(2),'Spalttiefe');
                xlabel(S.pm.df.ax(2),'Bauhöhe [mm]');
                ylabel(S.pm.df.ax(2),'Kanaltiefe [mm]');
                
                
                uistack(S.pm.parent,'top'); %brings menu back to top
                 
            otherwise
                %nothing
        end
        function showESS(slct)
            persistent showESS_slct showESS_out;
            if isempty(showESS_slct) || showESS_slct~=slct(1), showESS_out=[]; showESS_slct=slct(1); end
            
            psln = str2doubleN(get(S.ml.pl(2).ed(1),'string'));
            st_end = str2doubleN(get(S.ml.pl(3).ed(1),'string'))*1e-3;
            
            uconv = [1e3 1e3 1e3 1e-5 1 1];
            labeltxt = {'Endspalt [mm]' 'Anfangsspalt [mm]' 'Anfangswendeltiefe [mm]' 'Gesamtdruckverlust [bar]' 'Schergeschwindigkeit Wendel [s^-1]' 'Schergeschwindigkeit Spalt [s^-1]'};
            switch slct(1)
                case 1
                    in = (0.5:0.1:10)*1e-3;
                case 2
                    in = (0.5:0.1:10)*1e-3;
                case 3
                    in = (0.5:0.1:10)*1e-3;
                case 4
                    in = (50:50:1000)*1e5;
                case 5
                    in = (0.1:0.5:25);
                case 6
                    in = (0.1:0.5:25);
            end
            if isempty(showESS_out), showESS_out = getRB(in,slct(1),S.geometrie,S.material,psln,st_end); end
            xlabel(S.pm.df.ax(1),labeltxt{slct(1)});
            as = zeros(1,size(showESS_out,2));
            switch slct(2)
                case 1
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{3}.H*1e3;
                    end
                case 2
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{2}.H*1e3;
                    end
                case 3
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{1}.H*1e3;
                    end
                case 4
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{3}.delta_p*S.geometrie.H*1e3 *1e-5;
                    end
                case 5
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{1}.gamma;
                    end
                case 6
                    for ii=1:numel(as)
                        as(ii) = showESS_out{ii}{2}.gamma;
                    end
                otherwise
            end
            ylabel(S.pm.df.ax(1),labeltxt{slct(2)});
            plot(S.pm.df.ax(1),in.*uconv(slct(1)),as);
        end
        function switchEnable(h,~,objs)
            if get(h,'Value') == 1
                set(objs,'Enable','on');
            else
                set(objs,'Enable','off');
            end
        end %function switchEnable
        function saveVerlauf(~,~)
            [FileName,PathName] = uiputfile({'*.wbjn','Workbench-Journal Datei (*.wbjn)'},'Stützstellen speichern','export\');
            if (~isnumeric(FileName) && ~isnumeric(PathName)) % Abbruch prüfen
                [lvl_W, lvl_S, dP, dP_0] = collectWBData();
                writeJournalFile(strcat(PathName,FileName),xi_W(:,2)+xi_S(:,2),xi_S(:,2),lvl_W,lvl_S,dP,dP_0);
            end
        end
        function import2WB(~,~)
            try
                wb_Path = char(regexp(winqueryreg('HKEY_CLASSES_ROOT',strcat(winqueryreg('HKEY_CLASSES_ROOT','.wbpj'),'\Shell\open\command')),'"((?:.[^"])*)"','tokens','once'));
            catch
                [wbName,wbPath] = uigetfile({'RunWB2.exe','Workbench Executable'},'Pfad zur ANSYS Workbench angeben','');
                wb_Path = fullfile(wbPath,wbName);
                if (isnumeric(wbName) && isnumeric(wbPath)), return, end % Abbruch prüfen
            end
            [FileName,PathName] = uigetfile({'*.wbpj','Workbench-Projekt Datei (*.wbpj)'},'WB-Projekt Öffnen','');
            if (isnumeric(FileName) && isnumeric(PathName)), return, end % Abbruch prüfen
            wbp = fullfile(PathName,FileName);
            [lvl_W, lvl_S, dP, dP_0] = collectWBData();
            tmpF = tempname();
            writeJournalFile(tmpF,xi_W(:,2)+xi_S(:,2),xi_S(:,2),lvl_W,lvl_S,dP,dP_0);
            system( ['start "" "' wb_Path ' " -I -F "' wbp '" -R "' tmpF '"' ] );
        end
        function [lvl_W, lvl_S, dP, dP_0] = collectWBData()
            lvl_W = []; lvl_S = []; % initialisieren
            if get(S.pm.cb(1),'Value') == 1
                Stf = get(sl_l(1,2),'Value');
                Bbreite = get(sl_l(2,2),'Value');
                lvl_skm = [ 1-(Bbreite/100):Bbreite/100*2/Stf:1-(Bbreite/100*2/Stf) 1+(Bbreite/100*2/Stf):Bbreite/100*2/Stf:1+(Bbreite/100)];
                lvl_W = (xi_W(:,2)+xi_S(:,2)) * lvl_skm;
                lvl_S = xi_S(:,2) * lvl_skm;
            end
            dp_W = []; dp_S = []; dp_skm = []; % initialisieren
            if get(S.pm.cb(2),'Value') == 1
                Stf = get(sl_2(1,2),'Value');
                Bbreite = get(sl_2(2,2),'Value');
                dp_skm = [ 1-(Bbreite/100):Bbreite/100*2/Stf:1-(Bbreite/100*2/Stf) 1+(Bbreite/100*2/Stf):Bbreite/100*2/Stf:1+(Bbreite/100)];
                dp_W = (xi_W(:,2)+xi_S(:,2)) * dp_skm;
                dp_S = xi_S(:,2) * dp_skm;
            end
            dP = {{dp_W dp_skm} {dp_S dp_skm}};

            dp_W0 = []; dp_S0 = []; dp_skm0 = []; % initialisieren
            if get(S.pm.cb(3),'Value') == 1
                Stf2 = get(sl_l3(1,2),'Value');
                Bbreite2 = get(sl_l3(2,2),'Value');
                dp_skm0 = [ 1-(Bbreite2/100):Bbreite2/100*2/Stf2:1-(Bbreite2/100*2/Stf2) 1+(Bbreite2/100*2/Stf2):Bbreite2/100*2/Stf2:1+(Bbreite2/100)];
                dp_W0 = (xi_W(1,2)+xi_S(1,2))*dp_skm0;

                dp_S0 = xi_S(1,2) * dp_skm0;
            end
            dP_0 = {{dp_W0 dp_skm0} {dp_S0 dp_skm0}};
        end
        function showESsp(~,~,pos)
            if strcmp(get(S.fh,'SelectionType'),'alt')
                if slct(1) ~= pos, slct(2) = pos; end
            else
                if slct(2) ~= pos, slct(1) = pos; end
            end
            set(S.pm.rb(:),'value',0);
            set(S.pm.rb(slct),'value',1);
            drawnow;
            showESS(slct);
        end % function showESsp
        function showRes(~,eventdata)
            [~,ind] = sort(eventdata.NewValue==S.pm.rb(:),'descend');
            typ = ind(1);
            try %#ok<TRYNC>
                delete(S.pm.df.parent);
            end
            set(S.df.parent,'visible','off'); %hide ResPlot
            S.pm.df.parent = uipanel('Title','',...
                                       'units','pixels',...
                                       'position',[500 0 450 550],...
                                       'BackgroundColor',[0.941 0.941 0.941],...
                                       'BorderType','none',...
                                       'Parent',S.fh);
            %Berechnungsmatrix für den 1.Stromfaden über den Spalt
            b=[];
            for ii=1:floor(length([NStegSteg.tau_w NStegEnde.tau_w])/psln)
                b=blkdiag(b,[1 zeros(1,psln-1)]');
            end
            b=blkdiag(b,[1 zeros(1,mod(length([NStegSteg.tau_w NStegEnde.tau_w]),psln)-1)]');
            % Wendellängenvektor
            L_k = [NWendel.L]*triu(ones(length(NWendel)))*10.^3; %m -> mm
            switch typ
                case 1 %Wendelvolumenstrom
                    S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,0,450,550]);
                    plot(L_k,V(1:size(NWendel,2))*1e9,...
                        'Parent',S.pm.df.ax(1),...
                        'DisplayName','Volumenstrom Wendel');
                    xlabel('Wendellänge [mm]');
                    ylabel('Volumenstrom [mm^3/s]');
                case 2 %Wandschubspannung
                    % Wendel
                    S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,550/2,450,550/2]);
                    plot(L_k,[NWendel.tau_w]'*1e-6,...
                        'Parent',S.pm.df.ax(1),...
                        'DisplayName','Wandschubspannung');
                    xlabel('Wendellänge [mm]');
                    ylabel('Wandschubspannung [N/mm^2]');
                    title('Wendel');
                    
                    %Steg
                    S.pm.df.ax(2) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,0,450,550/2]);
                    plot([NStegSteg.tau_w NStegEnde.tau_w]*b*1e-6,...
                        'Parent',S.pm.df.ax(2),...
                        'DisplayName','Wandschubspannung');
                    xlabel('Überlappung');
                    ylabel('Wandschubspannung [N/mm^2]');
                    title('Spalt (1. Stromfaden)');
                    
                case 3 %Schergeschwindigkeit
                    % Wendel
                    S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,550/2,450,550/2]);
                    plot(L_k,[NWendel.gamma],...
                        'Parent',S.pm.df.ax(1),...
                        'DisplayName','Schergeschwindigkeit');
                    xlabel('Wendellänge [mm]');
                    ylabel('Schergeschwindigkeit [s^-1]');
                    title('Wendel');
                    
                    %Steg
                    S.pm.df.ax(2) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,0,450,550/2]);
                    plot([NStegSteg.gamma NStegEnde.gamma]*b,...
                        'Parent',S.pm.df.ax(2),...
                        'DisplayName','Schergeschwindigkeit');
                    xlabel('Überlappung');
                    ylabel('Schergeschwindigkeit [s^-1]');
                    title('Spalt (1. Stromfaden)');
                    
                case 4 %Druckabfall
                    % Wendel
                    S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,550/2,450,550/2]);
                    
                    plot(L_k,[NWendel.delta_p]*1e-5,...
                        'Parent',S.pm.df.ax(1),...
                        'DisplayName','Druckabfall');
                    xlabel('Wendellänge [mm]');
                    ylabel('Druckabfall [bar]');
                    title('Wendel');
                    
                    %Steg
                    S.pm.df.ax(2) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,0,450,550/2]);

                    plot([NStegSteg.delta_p NStegEnde.delta_p]*b*1e-5,...
                        'Parent',S.pm.df.ax(2),...
                        'DisplayName','Druckabfall');
                    xlabel('Überlappung');
                    ylabel('Druckabfall [bar]');
                    title('Spalt (1. Stromfaden)');
                case 5 %Druck
                    % Wendel
                    S.pm.df.ax(1) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,550/2,450,550/2]);
                    dp_k = [NWendel.delta_p]*triu(ones(length(NWendel)));
                    plot(L_k,dp_k*1e-5,...
                        'Parent',S.pm.df.ax(1),...
                        'DisplayName','Druck');
                    xlabel('Wendellänge [mm]');
                    ylabel('Druck [bar]');
                    title('Wendel');
                    
                    %Steg
                    S.pm.df.ax(2) = axes('Parent',S.pm.df.parent,...
                                           'units','pixels',...
                                           'OuterPosition',[0,0,450,550/2]);
                    plot([NStegSteg.delta_p NStegEnde.delta_p]*b*triu(ones(length([NStegSteg.delta_p NStegEnde.delta_p]*b)))*1e-5,...
                        'Parent',S.pm.df.ax(2),...
                        'DisplayName','Druck');
                    xlabel('Überlappung');
                    ylabel('Druck [bar]');
                    title('Spalt (1. Stromfaden)');
                otherwise
                    %nothing
            end
        end %function showRes
        
        function mbar(p)
            S.pm.mb.parent = uipanel('Title','',...
                                    'units','pixels',...
                                    'position',[5 30 240 40],...
                                    'BackgroundColor',hlc,...
                                    'BorderType','none',...
                                    'Parent',p);
            IconFile = fullfile(matlabroot, 'toolbox', 'matlab', 'icons', 'tool_data_cursor.gif');
            S.pm.dcursor_bp = uicontrol('Style', 'ToggleButton', ...
                       'Parent',S.pm.mb.parent,...
                       'Position', [5, 5, 32, 32], ...
                       'String', ['<html><img src="file:/', IconFile, '">'],...
                       'CallBack','datacursormode(''toggle'')',...
                       'DeleteFcn',@del);
            function del(h,~)
                datacursormode off;
                delete(h);
            end
        end %function mbar
        
        function del(h,~,t)
            switch t
                case 1
                    S.material.v0 = str2doubleN(get(S.pm.ed(1),'string'))^-1;
                    S.material.vs = str2doubleN(get(S.pm.ed(2),'string'))^-1;
                    S.material.A = str2doubleN(get(S.pm.ed(3),'string'));
                    S.material.B = str2doubleN(get(S.pm.ed(4),'string'));
                    S.material.C = str2doubleN(get(S.pm.ed(5),'string'));
                    S.material.Ts = str2doubleN(get(S.pm.ed(6),'string'))+273.15;
                    S.material.T0 = str2doubleN(get(S.pm.ed(7),'string'))+273.15;
                case 2
                    S.geometrie.H = str2doubleN(get(S.pm.ed(1),'string'))*1e-3;
                    S.geometrie.D = str2doubleN(get(S.pm.ed(2),'string'))*1e-3;
                case 3
                    S.geometrie.n = str2doubleN(get(S.pm.ed(1),'string'));
                    S.geometrie.alpha = str2doubleN(get(S.pm.ed(2),'string'));
                    S.geometrie.R = str2doubleN(get(S.pm.ed(3),'string'))/2*1e-3;
                case 4
                    set(S.ml.pl(3).pb(1), 'Enable', 'on');
                    
                    delete(S.pm.df.parent);
                    set(S.df.parent,'visible','on');
                otherwise
                    delete(S.pm.df.parent);
                    set(S.df.parent,'visible','on');
            end
            delete(h);
        end %function del
                    
    end %function popMenu

    function [] = loadMat(varargin)
        [FileName,PathName] = uigetfile({'*.mat','Material-Datei (*.mat)'},'Material wählen','materials\');
        try
            Load = load([PathName,FileName]);
            try
                S.material = Load.material;
                set(S.pm.parent,'DeleteFcn','');
                delete(S.pm.parent);
                popMenu(S.ml.pb(1),[],1);
            catch
                errordlg('Ungültiges Materialformat');
            end
        catch
            errordlg('Datei konnte nicht geöffnet werden');
        end
    end

    function [] = saveMat(varargin)
        [FileName,PathName] = uiputfile({'*.mat','Material-Datei (*.mat)'},'Material speichern','materials\');
        S.material.v0 = str2doubleN(get(S.pm.ed(1),'string'))^-1;
        S.material.vs = str2doubleN(get(S.pm.ed(2),'string'))^-1;
        S.material.A = str2doubleN(get(S.pm.ed(3),'string'));
        S.material.B = str2doubleN(get(S.pm.ed(4),'string'));
        S.material.C = str2doubleN(get(S.pm.ed(5),'string'));
        S.material.Ts = str2doubleN(get(S.pm.ed(6),'string'))+273.15;
        S.material.T0 = str2doubleN(get(S.pm.ed(7),'string'))+273.15;
%         try
            save([PathName,FileName],'-struct','S','material');
%         catch
%             errordlg('Datei konnte nicht gespeichert werden');
%         end
    end
    function writeJournalFile(FilePath, WSt, SSt, varargin)
        if numel(varargin{1:2})>0
            make_lvl = true;
            Wlvl = varargin{1};
            Slvl = varargin{2};
            formatStr = ['[' strjoin(cellstr(char(meshgrid(double('"%0.2f"'),1:size(Wlvl,2))))',',') ']'];
        else
            make_lvl = false;
        end
        if numel(varargin{3}{1}{1})>0
            make_dp = true;
            DP = varargin{3};
            formatStr2 = ['[' strjoin(cellstr(char(meshgrid(double('"%0.2f"'),1:size(DP{1}{1},2))))',',') ']'];
        else
            make_dp = false;
        end
        if numel(varargin{4}{1}{1})>0
            make_dp0 = true;
            DP0 = varargin{4};
            formatStr3 = strjoin(cellstr(char(meshgrid(double('"%0.2f"'),1:size(DP0{1}{1},1))))',',');
        else
            make_dp0 = false;
        end
        
        fileID = fopen(FilePath,'w');
        
        fprintf(fileID,'# encoding: utf-8\r\nSetScriptVersion(Version="15.0")\r\n\r\n');
        
        fprintf(fileID,'nr_w = 1\r\n');
        fprintf(fileID,'t_w = ["%0.2f"',WSt(1)); fprintf(fileID,', "%0.2f"',WSt(2:end)); fprintf(fileID,']\r\n');
        if make_lvl, fprintf(fileID,strcat('lvl_w = [',formatStr),Wlvl(1,:)); fprintf(fileID,strcat(',',formatStr),Wlvl(2:end,:)'); fprintf(fileID,']\r\n'); end
        if make_dp, fprintf(fileID,strcat('dp_w = [',formatStr2),DP{1}{1}(1,:)); fprintf(fileID,strcat(',',formatStr2),DP{1}{1}(2:end,:)'); fprintf(fileID,']\r\n'); end
        if make_dp0
            fprintf(fileID,strcat('dp_w0 = [',formatStr3),DP0{1}{1}(:,1)); fprintf(fileID,strcat(',',formatStr3),DP0{1}{1}(:,2:end)); fprintf(fileID,']\r\n');
            fprintf(fileID,'dp_w0_st = [%.2f',DP0{1}{2}(:,1)); fprintf(fileID,', %.2f',DP0{1}{2}(:,2:end)); fprintf(fileID,']\r\n');
        end
        fprintf(fileID,'nr_s = 9\r\n');
        fprintf(fileID,'t_s = ["%0.2f"',SSt(1)); fprintf(fileID,', "%0.2f"',SSt(2:end)); fprintf(fileID,']\r\n');
        if make_lvl, fprintf(fileID,strcat('lvl_s = [',formatStr),Slvl(1,:)); fprintf(fileID,strcat(',',formatStr),Slvl(2:end,:)'); fprintf(fileID,']\r\n'); end
        if make_dp, fprintf(fileID,strcat('dp_s = [',formatStr2),DP{2}{1}(1,:)); fprintf(fileID,strcat(',',formatStr2),DP{2}{1}(2:end,:)'); fprintf(fileID,']\r\n'); end
        if make_dp0
            fprintf(fileID,strcat('dp_s0 = [',formatStr3),DP0{2}{1}(:,1)); fprintf(fileID,strcat(',',formatStr3),DP0{2}{1}(:,2:end)); fprintf(fileID,']\r\n');
            fprintf(fileID,'dp_s0_st = [%.2f',DP0{2}{2}(:,1)); fprintf(fileID,', %.2f',DP0{2}{2}(:,2:end)); fprintf(fileID,']\r\n');
        end
        if make_dp, fprintf(fileID,'dp_st = [%.2f',DP{1}{2}(:,1)); fprintf(fileID,', %.2f',DP{1}{2}(:,2:end)); fprintf(fileID,']\r\n'); end
        fprintf(fileID, 'Parameters.GetDesignPoint(Name="0").SetParameterExpression(Parameter=Parameters.GetParameter(Name="P8"),Expression="")\r\n');
        if make_dp || make_dp0
        fprintf(fileID, strcat('#Clear existing DesignPoints excluding the first (flagged as current)\r\n',...
                               'for dp in Parameters.GetAllDesignPoints():\r\n',...
                               '\tif dp.Name !="0":\r\n',...
                               '\t\tdp.Delete()\r\n'));
        end
        if make_lvl, fprintf(fileID, 'optimizationModel1 = GetSystem(Name="DOP").GetContainer(ComponentName="Optimization").GetModel()\r\n'); end
        fprintf(fileID, strcat('for i in range(8):\r\n',...
                               '\tParameters.GetParameter(Name="P"+str(nr_w+i)).Expression = t_w[i]\r\n'));
        if make_lvl
        fprintf(fileID, strcat('\tinputParameter12 = optimizationModel1.GetParameter(Name="P"+str(nr_w+i))\r\n',...
                               '\tinputParameter12.UseManufacturableValues = True\r\n',...
                               '\tinputParameter12.AddLevels(Levels=lvl_w[i], Overwrite=True)\r\n'));
        end
        fprintf(fileID, strcat('\t\r\n',...
                               '\tParameters.GetParameter(Name="P"+str(nr_s+i)).Expression = t_s[i]\r\n'));
        if make_lvl
        fprintf(fileID, strcat('\tinputParameter12 = optimizationModel1.GetParameter(Name="P"+str(nr_s+i))\r\n',...
                               '\tinputParameter12.UseManufacturableValues = True\r\n',...
                               '\tinputParameter12.AddLevels(Levels=lvl_s[i], Overwrite=True)\r\n'));
        end
%         fprintf(fileID, strcat('\t\r\n',...
%                                '\tnr_w+=1\r\n',...
%                                '\tnr_s+=1\r\n'));
        if make_dp
        fprintf(fileID, strcat('for k in range(len(dp_w[0])):\r\n',...
                               '\tdPoint = Parameters.CreateDesignPoint()\r\n',...
                               '\tfor i in range(len(dp_w)):\r\n',...
                               '\t\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter(Name="P"+str(nr_w+i)),Expression=dp_w[i][k])\r\n',...
                               '\tdPoint.Note = "Verschiebung.Wendel - " + str(dp_st[k])\r\n',...
                               'for k in range(len(dp_s[0])):\r\n',...
                               '\tdPoint = Parameters.CreateDesignPoint()\r\n',...
                               '\tfor i in range(len(dp_s)):\r\n',...
                               '\t\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter(Name="P"+str(nr_s+i)),Expression=dp_s[i][k])\r\n',...
                               '\tdPoint.Note = "Verschiebung.Spalt - " + str(dp_st[k])\r\n'));
        end
        if make_dp0
        fprintf(fileID, strcat('for i in range(%i):\r\n',...
                               '\tdPoint = Parameters.CreateDesignPoint()\r\n',...
                               '\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter(Name="P1"),Expression=dp_w0[i])\r\n',...
                               '\tdPoint.Note = "Wendeltiefe.Anfang - " + str(dp_w0_st[i])\r\n',...
                               '\tk = nr_w\r\n',...
                               '\twhile ( dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k))) < dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k+1))) ) & (k < nr_w + 7):\r\n',...
                               '\t\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter("P"+str(k+1)),Expression=str(dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k)))))\r\n',...
                               '\t\tk += 1\r\n',...
                               '\tdPoint = Parameters.CreateDesignPoint()\r\n',...
                               '\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter(Name="P9"),Expression=dp_s0[i])\r\n',...
                               '\tdPoint.Note = "Spalttiefe.Anfang - " + str(dp_s0_st[i])\r\n',...
                               '\tk = nr_s\r\n',...
                               '\twhile ( dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k))) > dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k+1))) ) & (k < nr_s + 7):\r\n',...
                               '\t\tdPoint.SetParameterExpression(Parameter=Parameters.GetParameter("P"+str(k+1)),Expression=str(dPoint.GetParameterValue(Parameters.GetParameter("P"+str(k)))))\r\n',...
                               '\t\tk += 1\r\n'),size(DP0{1}{1},2));
        end
        fprintf(fileID, 'Parameters.GetDesignPoint(Name="0").SetParameterExpression(Parameter=Parameters.GetParameter(Name="P8"),Expression="P16")');
        fclose(fileID);
    end %function writeJournalFile
    function ST_sm = sm_ST(ST_id)
            %Spalttiefenverlauf glätten
            [xData, yData] = prepareCurveData( [], ST_id );
            % Set up fittype and options.
            ft = fittype( 'smoothingspline' );
            opts = fitoptions( 'Method', 'SmoothingSpline' );
            opts.SmoothingParam = 0.01;
            % Fit model to data.
            [fitresult, ~] = fit( xData, yData, ft, opts );
            ST_sm = ppval(fitresult.p,linspace(1,100,30));
    end %function sm_ST

    function closePM(varargin)
        type = varargin{3};
        set(S.ml.pb(:), 'Enable', 'on');
        set(S.ml.pb(type), 'BackgroundColor', bgc);
        delete(S.pm.parent);
    end %function closePM

    function dbl = str2doubleN(str)
        dbl = str2double(str);
        if isnan(dbl)
            dbl = [];
        end
    end %function str2doubleN
end

